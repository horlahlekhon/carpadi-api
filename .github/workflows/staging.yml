on:
  push:
    branches:
      - master
name: Deploy to staging
jobs:
#  lint:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Setup Python 3.8
#        uses: actions/setup-python@v1
#        with:
#          python-version: 3.8
#      - name: Checkout
#        uses: actions/checkout@master
#      - name: Lint
#        uses: lgeiger/black-action@master
#        with:
#          args: "src --check"

  build:
    name: build and push image
    runs-on: ubuntu-20.04
#    needs: lint
    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#      - name: Setup Node.js Environment
#        uses: actions/setup-node@v2
#        with:
#          node-version: "16"
#          cache: "yarn"
#      - name: Get next version
#        uses: nick-invision/retry@v2
#        with:
#          timeout_minutes: 15
#          max_attempts: 2
#          # retry_on: error
#          command: |
#            yarn install
#            npx semantic-release --dry-run
#            cat ./artifacts/.VERSION >> $GITHUB_ENV
#        env:
#          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
#      - name: Docker Build & Push to Container Registry
#        run: |
#          export NEXT_VERSION=latest
#          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
#          docker build -t olalekanadebari/carpadi-api:$NEXT_VERSION .
#          if [ ${{ github.ref }} == "refs/heads/master" ]; then
#            docker image tag  olalekanadebari/carpadi-api:$NEXT_VERSION olalekanadebari/carpadi-api:latest
#          fi
#          docker image push --all-tags  olalekanadebari/carpadi-api
#          docker logout
#        env:
#          NEXT_VERSION: ${{  env.NEXT_VERSION }}
#
#      - name: Release
#        uses: nick-invision/retry@v2
#        with:
#          timeout_minutes: 15
#          max_attempts: 2
#          # retry_on: error
#          command: |
#            # yarn install
#            npx semantic-release
#            cat ./artifacts/.VERSION
#        env:
#          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}


#      - name: Deploy container
#        run: |
#          echo "$(cat ./artifacts/.VERSION)"
#          echo ${NEXT_VERSION} > version
#          echo "${{ secrets.SSH_PEM }}" > private_key && chmod 600 private_key
#          echo "${{ secrets.APP_ENVS }}" > .env
#          scp -i private_key -o StrictHostKeyChecking=no version ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_STAGING_HOST }}:~/version
#          scp -i private_key -o StrictHostKeyChecking=no .env ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_STAGING_HOST }}:~/.env
#          ssh -o StrictHostKeyChecking=no -i private_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_STAGING_HOST }} 'docker rm -f carpadi-api'
#          ssh -o StrictHostKeyChecking=no -i private_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_STAGING_HOST }} 'docker run --name carpadi-api -p 8000:8000 -v /app/static:/app/src/staticfiles --env-file ~/.env -d olalekanadebari/carpadi-api:$(cat ~/version)'


      - name: Deploy image to server
        uses: appleboy/ssh-action@master
        env:
          IMAGE_NAME: "olalekanadebari/carpadi-api"
          IMAGE_TAG: latest
          CONTAINER_NAME: "carpadi-api"
        with:
          host: ${{ secrets.SSH_STAGING_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASS }}
          port: ${{ secrets.SSH_PORT }}
          envs: IMAGE_NAME,IMAGE_TAG,CONTAINER_NAME
          script: |
            docker container stop $CONTAINER_NAME
            docker container rm $CONTAINER_NAME
            docker pull $IMAGE_NAME:$IMAGE_TAG
            docker run -d -p 8000:8000 --name $CONTAINER_NAME -v /app/static:/app/src/staticfiles --env-file ~/.env $IMAGE_NAME:$IMAGE_TAG
            docker image prune -a --force