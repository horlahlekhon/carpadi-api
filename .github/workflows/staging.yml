on:
  push:
    branches:
      - master
name: Deploy to staging
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Checkout
        uses: actions/checkout@master
      - name: Lint
        uses: lgeiger/black-action@master
        with:
          args: "src --check"

  build:
    name: build and push image
    runs-on: ubuntu-20.04
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js Environment
        uses: actions/setup-node@v2
        with:
          node-version: "16"
          cache: "yarn"
      - name: Get next version
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 2
          # retry_on: error
          command: |
            yarn install
            npx semantic-release --dry-run
            cat ./artifacts/.VERSION >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Docker Build & Push to Container Registry
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker build -t olalekanadebari/carpadi-api:$NEXT_VERSION .
          if [ ${{ github.ref }} == "refs/heads/master" ]; then
            docker image tag  olalekanadebari/carpadi-api:$NEXT_VERSION olalekanadebari/carpadi-api:latest
          fi
          docker image push --all-tags  olalekanadebari/carpadi-api
          docker logout
        env:
          NEXT_VERSION: ${{  env.NEXT_VERSION }}

      - name: Release
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 2
          # retry_on: error
          command: |
            # yarn install
            npx semantic-release
            cat ./artifacts/.VERSION
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
#    - name: Download version file
#      uses: actions/download-artifact@v2
#      with:
#        name: .VERSION
#        path: ./artifacts

      - name: Deploy container
        run: |
          export NEXT_VERSION=${NEXT_VERSION}
          echo "${{ secrets.APP_ENVS }}" > .env
          echo "${{ secrets.SSH_PEM }}" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_STAGING_HOST }} '
          sudo docker run -p 8000:8000 --env-file .env -d olalekanadebari:$NEXT_VERSION 
          exit
        
